name: Build and push container images to ghcr.io

on:
  # Development and Bugfixes
  #push:
  #  branches:
  #    - 'feature/*'
  #    - 'bugfix/*'
  #    - 'master'
  #  paths:
  #      - 'containers/**'
  #      - '.github/workflows/build-containers.yml'
  #      - '!**.md'

  # Production - NOTE: Another prd-ready build with specific tag can be used
  pull_request:
    branches:
      - main
    paths:
        - 'containers/**'
        - '.github/workflows/build-containers.yml'
        - '!**.md'
    types: [ closed ]

jobs:
  build-and-push:
    #if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.ACTION_GITHUB_TOKEN }} 
    
    - name: Get short commit sha
      id: vars
      run: |
        echo "SHORT_SHA=$(git rev-parse --short ${{ github.sha }})" >> "$GITHUB_OUTPUT"

    - name: Build container images
      run: |
        #!/bin/bash
        set -e

        for folder in `find ./containers/ -type d -maxdepth 1`; do

          echo "Processing folder: $folder"
          cd "$folder"
          pwd

          if [ -s "Dockerfile" ] && [ -f "Dockerfile" ] && [ -s "config" ] && [ -f "config" ]; then

            # Read the contents of the file into a variable
            ENV_VARS=$(<config)
            
            # Set each line as an environment variable
            while IFS= read -r line; do
              export "$line"
            done <<< "$ENV_VARS"

            echo "Container image name: $IMAGE_NAME"

            # Build the container image
            echo "buildx build -t $IMAGE_NAME:${{steps.vars.outputs.SHORT_SHA}} ."
   
            docker buildx build -t $IMAGE_NAME:${{steps.vars.outputs.SHORT_SHA}} .
            docker tag $IMAGE_NAME:${{steps.vars.outputs.SHORT_SHA}} $IMAGE_NAME:latest
   
            docker images
   
            docker push $IMAGE_NAME:${{ steps.vars.outputs.SHORT_SHA }}
            docker push $IMAGE_NAME:latest

            cd -

          else
            echo "Dockefile or config files are missing in the folder: $folder, so nothing to do, exiting."
            cd -
          fi
          
        done
